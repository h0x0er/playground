name: Init Envs
on:
  workflow_dispatch:

permissions:
  contents: read


jobs:
  initialize-envs:
    name: init envs
    runs-on: ubuntu-latest

    outputs:
      cloud_env: ${{ steps.cloud_env.outputs.CLOUD_ENV }}
      deployment_method: ${{ steps.deployment_method.outputs.DEPLOYMENT_METHOD }}
      use_argo: ${{ steps.deployment_method.outputs.DEPLOYMENT_METHOD == 'argo' }}
      instance_type: ${{ steps.cloud_env.outputs.CLOUD_ENV == 'eks' && 't3.large' || 'e2-standard-8'  }}
      release_branch: ${{ steps.release_branch.outputs.RELEASE_BRANCH }}

    steps:
    
    - name: cloud_env
      id: cloud_env
      run: cloud_envs=('eks' 'gke');echo CLOUD_ENV=${cloud_envs[RANDOM%2]} >> "$GITHUB_OUTPUT"

    - name: deployment_method
      id: deployment_method
      run: deployment_methods=('helm' 'argo');echo DEPLOYMENT_METHOD=${deployment_methods[RANDOM%2]} >> "$GITHUB_OUTPUT"

    - name: release_branch
      id: release_branch
      run: release_branches=('main' 'int');echo RELEASE_BRANCH=${release_branches[RANDOM%2]} >> "$GITHUB_OUTPUT"

        
        

    - run: env


  access-envs:
    name: access envs
    runs-on: ubuntu-latest
    needs: initialize-envs
    env:
      
      CLOUD_ENV: ${{needs.initialize-envs.outputs.cloud_env}}
      INSTANCE_TYPE: ${{ needs.initialize-envs.outputs.instance_type }}
      RELEASE_BRANCH: ${{needs.initialize-envs.outputs.release_branch}}
      USE_ARGOCD: ${{ needs.initialize-envs.outputs.use_argo}}


    steps:
    
    - run: env

    - name: if gke
      if: ${{ env.CLOUD_ENV == 'gke' }}
      run: echo "env is gke"

    - name: if eks
      if: ${{ env.CLOUD_ENV == 'eks' }}
      run: echo "env is eks"
            

        